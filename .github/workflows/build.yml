name: Compilation

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/FUNDING.yml'
      - '**/README.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/FUNDING.yml'
      - '**/README.md'
  workflow_dispatch:
    inputs:
      run_release:
        description: 'Release the Artifacts'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      version_number:
        description: 'Release version'
        required: true
        default: 'v1.0.0'

env:
  REMOVE_BUNDLED_BOOST : rm -rf /usr/local/share/boost
  BUILD_DEFAULT_LINUX: |
        cmake -S . -B build -D ARCH="default" -D BUILD_TESTS=ON -D CMAKE_BUILD_TYPE=Release && cmake --build build -j3
  APT_INSTALL_LINUX: 'sudo apt -y install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libnorm-dev libusb-1.0-0-dev libpgm-dev libprotobuf-dev protobuf-compiler ccache'
  APT_SET_CONF: |
        echo "Acquire::Retries \"3\";"         | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";"  | sudo tee -a /etc/apt/apt.conf.d/80-custom
  CCACHE_SETTINGS: |
        ccache --max-size=150M
        ccache --set-config=compression=true

jobs:
  build-cross:
    name: ${{ matrix.toolchain.name }}
    runs-on: ubuntu-20.04
    env:
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - name: "RISC-V 64bit (riscv64-linux-gnu)"
            host: "riscv64-linux-gnu"
            packages: "g++-riscv64-linux-gnu"
          - name: "Linux x86_64 (x86_64-unknown-linux-gnu)"
            host: "x86_64-unknown-linux-gnu"
          - name: "FreeBSD x86_64 (x86_64-unknown-freebsd)"
            host: "x86_64-unknown-freebsd"
            packages: "clang-8"
          - name: "ARM v7 (arm-linux-gnueabihf)"
            host: "arm-linux-gnueabihf"
            packages: "g++-arm-linux-gnueabihf"
          - name: "ARM v8 (aarch64-linux-gnu)"
            host: "aarch64-linux-gnu"
            packages: "g++-aarch64-linux-gnu"
          - name: "ARMv7 Android (arm-linux-android)"
            host: "arm-linux-android"
          - name: "ARMv8 Android (aarch64-linux-android)"
            host: "aarch64-linux-android"
          - name: "Win64 (x86_64-w64-mingw32)"
            host: "x86_64-w64-mingw32"
            packages: "g++-mingw-w64-x86-64"
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    - name: ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ matrix.toolchain.host }}-${{ github.sha }}
        restore-keys: ccache-${{ matrix.toolchain.host }}-
    - name: depends cache
      uses: actions/cache@v4
      with:
        path: contrib/depends/built
        key: depends-${{ matrix.toolchain.host }}-${{ hashFiles('contrib/depends/packages/*') }}
        restore-keys: |
          depends-${{ matrix.toolchain.host }}-${{ hashFiles('contrib/depends/packages/*') }}
          depends-${{ matrix.toolchain.host }}-
    - uses: ./.github/actions/set-make-job-count
    - name: set apt conf
      run: ${{env.APT_SET_CONF}}
    - name: install dependencies
      run: sudo apt update; sudo apt -y install build-essential libtool cmake autotools-dev automake pkg-config python3 gperf bsdmainutils curl git ca-certificates ccache ${{ matrix.toolchain.packages }}
    - name: prepare w64-mingw32
      if: ${{ matrix.toolchain.host == 'x86_64-w64-mingw32' }}
      run: |
        sudo update-alternatives --set ${{ matrix.toolchain.host }}-g++ $(which ${{ matrix.toolchain.host }}-g++-posix)
        sudo update-alternatives --set ${{ matrix.toolchain.host }}-gcc $(which ${{ matrix.toolchain.host }}-gcc-posix)
    - name: Fix permissions for all scripts
      run: |
        chmod -R 777 /home/runner/work/Lunify/Lunify/contrib/depends/config.guess
        chmod -R 777 /home/runner/work/Lunify/Lunify/contrib/depends/config.sub
    - name: build
      run: |
        ${{env.CCACHE_SETTINGS}}
        make depends target=${{ matrix.toolchain.host }} -j${{env.MAKE_JOB_COUNT}}
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.toolchain.name }}
        path: |
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-depth${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-export${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-import${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-mark-spent-outputs${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-prune${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-prune-known-spent-data${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-stats${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-blockchain-usage${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunifyd${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-gen-ssl-cert${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-gen-trusted-multisig${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-wallet-cli${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}
          /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/${{ matrix.toolchain.host }}/release/bin/lunify-wallet-rpc${{ '.exe' if matrix.toolchain.host == 'x86_64-w64-mingw32' else '' }}

  build-mac:
    name: ${{ matrix.toolchain.name }}
    runs-on: ${{ matrix.toolchain.os }}
    env:
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    strategy:
      matrix:
        toolchain:
          - name: "MacOS (x86_64-apple-darwin)"
            os: macos-13
          - name: "MacOS (arm64-apple-darwin)"
            os: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/cache@v4
      with:
        path: /Users/runner/Library/Caches/ccache
        key: ccache-${{ runner.os }}-build-${{ github.sha }}
        restore-keys: ccache-${{ runner.os }}-build-
    - name: install dependencies
      run: HOMEBREW_NO_AUTO_UPDATE=1 brew install boost hidapi zmq libpgm miniupnpc expat libunwind-headers protobuf ccache
    - uses: ./.github/actions/set-make-job-count
    - name: build
      run: |
        ${{env.CCACHE_SETTINGS}}
        make -j${{env.MAKE_JOB_COUNT}}
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.toolchain.name }}
        path: |
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-depth
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-export
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-import
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-mark-spent-outputs
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-prune
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-prune-known-spent-data
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-stats
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-blockchain-usage
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunifyd
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-gen-ssl-cert
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-gen-trusted-multisig
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-wallet-cli
          /Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/Darwin/main/release/bin/lunify-wallet-rpc

  download:
    name: Release Artifacts
    needs: ['build-cross']
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_release == 'true' }}
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: release
        merge-multiple: false
    - name: Create tar.gz archive for 'MacOS (arm64-apple-darwin)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-arm64-apple-darwin.tar.gz' -C release 'MacOS (arm64-apple-darwin)'
    - name: Create tar.gz archive for 'MacOS (x86_64-apple-darwin)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-x86_64-apple-darwin.tar.gz' -C release 'MacOS (x86_64-apple-darwin)'
    - name: Create zip archive for 'Win64 (x86_64-w64-mingw32)'
      run: |
        zip -r 'release/Lunify-${{ github.event.inputs.version_number }}-x86_64-w64-mingw32.tar.gz' 'release/Win64 (x86_64-w64-mingw32)'
    - name: Create tar.gz archive for 'RISC-V 64bit (riscv64-linux-gnu)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-riscv64-linux-gnu.tar.gz' -C release 'RISC-V 64bit (riscv64-linux-gnu)'
    - name: Create tar.gz archive for 'Linux x86_64 (x86_64-unknown-linux-gnu)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-x86_64-unknown-linux-gnu.tar.gz' -C release 'Linux x86_64 (x86_64-unknown-linux-gnu)'
    - name: Create tar.gz archive for 'FreeBSD x86_64 (x86_64-unknown-freebsd)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-x86_64-unknown-freebsd.tar.gz' -C release 'FreeBSD x86_64 (x86_64-unknown-freebsd)'
    - name: Create tar.gz archive for 'ARM v7 (arm-linux-gnueabihf)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-arm-linux-gnueabihf.tar.gz' -C release 'ARM v7 (arm-linux-gnueabihf)'
    - name: Create tar.gz archive for 'ARM v8 (aarch64-linux-gnu)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-aarch64-linux-gnu.tar.gz' -C release 'ARM v8 (aarch64-linux-gnu)'
    - name: Create tar.gz archive for 'ARMv7 Android (arm-linux-android)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-arm-linux-android.tar.gz' -C release 'ARMv7 Android (arm-linux-android)'
    - name: Create tar.gz archive for 'ARMv8 Android (aarch64-linux-android)'
      run: |
        tar -czf 'release/Lunify-${{ github.event.inputs.version_number }}-aarch64-linux-android.tar.gz' -C release 'ARMv8 Android (aarch64-linux-android)'
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: Lunify ${{ github.event.inputs.version_number }}
        tag_name: ${{ github.event.inputs.version_number }}
        draft: true
        prerelease: false
        files: release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
